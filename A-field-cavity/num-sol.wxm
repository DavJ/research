/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 13.04.2 ] */

/* [wxMaxima: input   start ] */
Az(r,z,a):=1/(2*%pi*sqrt(z^2+(a+r)^2))*((a^2-z^2-r^2)/(z^2+(r-a)^2)*elliptic_ec(2*(r*a)^(1/2)*(z^2+(a+r)^2)^((-1)/2))+elliptic_kc(2*(r*a)^(1/2)*(z^2+(a+r)^2)^((-1)/2)));
Z0:float(1);
V0:float(quad_qags(Az(0,z,1), z, 0, Z0)[1]);
V(r,Z):=quad_qags(Az(r,z,1), z, 0, Z)[1];
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
newton(r,target,estimate):= block([i,x,delta], 
           x:estimate,
           i:0,
           delta:1e-3,
           f:V(r,x)-target,
           do (i:i+1,
               if (i>50) then throw (1),
               df:(V(r,x+delta/2)-V(r,x-delta/2))/delta,
               x:x-f/df,
               f:V(r,x)-target,
               /*print("i",i,"x",x,"f",f,"df",df),*/
               if (abs(f)<1e-10) then return(x)
               
              ));
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/*newton(0,V0,0.1);
newton(0.1,V0,%);
newton(0.2,V0,%);
newton(0.3,V0,%);
newton(0.4,V0,%);
newton(0.5,V0,%);
newton(0.6,V0,%);
newton(0.7,V0,%);
newton(0.8,V0,%);
newton(0.9,V0,%);
newton(0.9999999,V0,%);*/;
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
vect(min,max,steps):=block([M,i,st],
                      st:(max-min)/steps,
                      M:[],
                      for i:min step st thru (max-st) do ( 
                                                     M:append(M,[float(i)])
                                                    
                                                     ),
                      return(M)
                     );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
X:vect(0,1,100);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
nvect(target,estimate,min,max,steps):=block([M,r,stp,value],
                      stp:float((max-min)/steps),
                      M:[],
                      print("st",stp,"min",min,"max",max),
                      value:estimate,
                      for i:min step stp thru (max-stp) do (
                                                     print("i",i),
                                                     
                                                     value:float(newton(i,target,value)), 
                                                     M:append(M,[value]),
                                                     print("i",i,"step",stp,"max",max,"M",M)
                                                    ),
                      return(M)
                     );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
nelips(target,estimate,min,max,steps):=block([M,r,stp,value],
                      stp:float((max-min)/steps),
                      M:[],
                      print("st",stp,"min",min,"max",max),
                      value:estimate,
                      for i:min step stp thru (max-stp) do (
                                                     print("i",i),
                                                     
                                                     value:float(newton(i,target,value)), 
                                                     M:append(M,[value])
                                                    ),
                      return(M)
                     );
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
UFO:nvect(V0,0.1,0,1,1000);
/* [wxMaxima: input   end   ] */

/* [wxMaxima: input   start ] */
/* plot2d ([[discrete, X,UFO],[parametric, cos(x), Z0*sin(x), [x,0,%pi/2]]])$ */

plot2d ([discrete,UFO])$
/* [wxMaxima: input   end   ] */

/* Maxima can't load/batch files which end with a comment! */
"Created with wxMaxima"$
